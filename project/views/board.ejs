<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/private/css/framework.css">
    <link rel="stylesheet" href="/private/css/boards.css">
    <link rel="stylesheet" href="/private/css/navbar.css">
    <link rel="shortcut icon" href="/private/images/logo.png" type="image/x-icon">
    <title>Loading board...</title>
</head>
<body onload="getEntries()">
    <div id="nav"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js" integrity="sha512-E8QSvWZ0eCLGk4km3hxSsNmGWbLtSCSUcewDQPQWZF6pEU8GlT8a5fF32wOl1i8ftdMhssTrF/OhyGWwonTcXA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://code.jquery.com/jquery-3.6.1.js" integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI=" crossorigin="anonymous"></script>
    <script>
        $(() => {
            $('#nav').load('/views/navbar.ejs')
        })
    </script>
    <script>
        function getEntries() {
            // what board is being used (extracted using Express(req.query.{queryItem}))
            let href = window.location.href.split('?')[1]
            let type = href.split('&')[0].split('=')[1]
            let err
            try {
                err = href.split('&')[1].split('=')[1]
            } catch(err) {
                err = false
            }

            // create the section
            $('<section>', {
                id: `${type}`, // set what sort of board it is (for css and jQuery usage)
                class: 'board p20' // add framework css for visuals
            }).appendTo('body') // append to the main tag of page

            // make the header (dynamic)
            $('<h1>', {
                id: 'header', 
                class: 'fs30' // adding framework
            }).appendTo(`#${type}`) // add to previously created section from id

             // make seperator - visuals are compiled by css
            $('<div>', {class:'sep'}).appendTo(`#${type}`)
            
            if(err) {
                $('<p>', {
                    class: 'text-center color-red fs20',
                    text: 'Unable to add to leaderboard',
                    id: 'leaderboard-error'
                }).appendTo(`.sep`)

                setTimeout(() => {
                    $("#leaderboard-error").hide('slide')
                }, 4000);
            }

            // read the file using jQuery and JSON
            $.get(`../db/${type}.json`, json => {
                const entries = json.entries // set up what part of JSON to use
                //table in board headers
                const id_types = ['name', 'date', 'score', 'errors', 'level']
                
                // are there entries from JSON file?
                if(entries.length > 0) {
                    // create table
                    $('<table>', {
                        // ensuring the correct table will be used
                        // ... when adding other values
                        id: `${type}-entries`
                    }).appendTo(`#${type}`)
                    
                    // new table row
                    $('<tr>', {
                        class: "fs20 m20", // framework
                        id: 'table-header'
                    }).appendTo(`#${type}-entries`) // add to correct table
                    
                    // add the headers of the table to table
                    for(let i = 0; i < id_types.length; i++) {
                        $('<th>', { // new row entry
                            // making text capitalised using character seperation
                            text: `${id_types[i].charAt(0).toUpperCase() + id_types[i].slice(1)}`,
                            class: "fs20 m20"
                        }).appendTo('#table-header') // add it to the table heading
                    }
                    // adding table entries from JSON file
                    for(let x = 0; x < entries.length; x++) {
                        // same process as before, add new row 
                        $('<tr>',{
                            id: `entry${x + 1}`, // this time assign row id
                        }).appendTo(`#${type}-entries`)

                        let obj = Object.values(entries[x]) // convert text to object

                        for(let value = 0; value < obj.length - 1; value++) { // cycle through each key in object and get val
                            $('<th>',{ // new row part
                                class: "color-black fs20 m20",
                                id: `${id_types[value]}-${x + 1}`, // for future updates (TABLE FILTERS)
                            }).appendTo(`#entry${x + 1}`) // x is 0 based, add 1
                            if(id_types[value] == 'name' || id_types[value] == 'level') {
                                $('<a>', {
                                    text: obj[value],
                                    href: `${id_types[value] == 'level' ? `${window.location.origin}/level?${CryptoJS.AES.encrypt(obj[value], "level")}&${CryptoJS.AES.encrypt("2", "status-message")}` : `${window.location.origin}/profile?id=${entries[x]["id"]}`}`
                                }).appendTo(`#${id_types[value]}-${x + 1}`)
                            } else {
                                $(`#${id_types[value]}-${x + 1}`).text(obj[value]).css('color', 'white')
                            }
                        }
                    }
                } else { // there are no entries in the leaderboard table in database?
                    $('<p>', { // new paragraph
                        text: 'Nothing to see here :(', // User feedback
                        class: 'text-center fs20 m20'
                    }).appendTo(`#${type}`) // add to correct board
                }
                
                // Set title to correct board type using Express({res.query.dest})
                type = type.charAt(0).toUpperCase() + type.slice(1)
                $(document).prop('title', `${type} | ATC`)
                $('#header').text(type)
            })
        }
    </script>
</body>
</html>